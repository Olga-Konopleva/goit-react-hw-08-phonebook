{"version":3,"sources":["redux/contacts/contacts-action.js","redux/auth/auth-selectors.js","components/Navigation/Navigation.module.scss","components/AppBar/AuthNav/AuthNav.module.scss","redux/auth/auth-operations.js","redux/auth/auth-actions.js","components/AppBar/UserMenu/UserMenu.module.scss","components/AppBar/AppBar.module.scss","components/Navigation/Navigation.js","components/AppBar/AuthNav/AuthNav.js","components/AppBar/UserMenu/UserMenu.js","components/AppBar/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contacts-reducer.js","redux/auth/auth-reducer.js","redux/store.js","index.js"],"names":["fetchRequest","createAction","fetchSuccess","fetchError","addRequest","addSuccess","addError","deleteRequest","deleteSuccess","deleteError","filterContacts","getAutendicated","state","auth","isAutenticated","getEmail","user","email","getName","name","module","exports","axios","defaults","baseURL","token","headers","common","Authorization","register","credential","dispatch","a","registerRequest","post","data","registerSuccess","registerError","message","logIn","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError","Navigation","this","props","className","styles","nav_link","activeClassName","nav_linkActive","to","exact","Component","connect","AuthNav","Button","styled","button","UserMenu","onLogout","userMenu","type","onClick","mapDispatchToProps","AppBar","isAutendicated","header","isAuntenticated","component","routeProps","render","restricted","HomeView","lazy","ContactsView","LoginView","RegisterView","App","onGetCurrentUser","fallback","path","itemsReducer","createReducer","_","payload","filter","item","id","filterReducer","loading","combineReducers","items","initialState","error","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contacts","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf5bbbdb.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchRequest = createAction('contact/FetchRequest');\nexport const fetchSuccess = createAction('contact/FetchSuccess');\nexport const fetchError = createAction('contact/FetchError');\n\nexport const addRequest = createAction('contact/AddRequest');\nexport const addSuccess = createAction('contact/AddSuccess');\nexport const addError = createAction('contact/AddError');\n\nexport const deleteRequest = createAction('contact/DeleteRequest');\nexport const deleteSuccess = createAction('contact/DeleteSuccess');\nexport const deleteError = createAction('contact/DeleteError');\n\nexport const filterContacts = createAction('contact/Filter');\n\n//Pure Redux\n// export const addContact = (name, number) => ({\n//   type: actionTypes.ADD,\n//   payload: { id: uuidv4(), name, number },\n// });\n\n// export const deleteContact = id => ({\n//   type: actionTypes.DELETE,\n//   payload: id,\n// });\n\n// export const filterContacts = value => ({\n//   type: actionTypes.FILTER,\n//   payload: value,\n// });\n","export const getAutendicated = state => state.auth.isAutenticated;\n\nexport const getEmail = state => state.auth.user.email;\n\nexport const getName = state => state.auth.user.name;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_link\":\"Navigation_nav_link__3xgsb\",\"nav_linkActive\":\"Navigation_nav_linkActive__ajmA6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav_link\":\"AuthNav_nav_link__2sb-T\",\"nav_linkActive\":\"AuthNav_nav_linkActive__3zQei\"};","import axios from 'axios';\nimport {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n} from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nexport const register = credential => async dispatch => {\n  dispatch(registerRequest());\n  try {\n    const { data } = await axios.post('/users/signup', credential);\n    token.set(data.token);\n    dispatch(registerSuccess(data));\n  } catch (error) {\n    dispatch(registerError(error.message));\n  }\n};\n\nexport const logIn = credential => async dispatch => {\n  dispatch(loginRequest());\n  try {\n    const { data } = await axios.post('/users/login', credential);\n    token.set(data.token);\n    dispatch(loginSuccess(data));\n  } catch (error) {\n    dispatch(loginError(error.message));\n  }\n};\n\nexport const logOut = () => async dispatch => {\n  dispatch(logoutRequest());\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n    dispatch(logoutSuccess());\n  } catch (error) {\n    dispatch(logoutError(error.message));\n  }\n};\n\nexport const getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(getCurrentUserRequest());\n\n  try {\n    const { data } = await axios.get('/users/current');\n    dispatch(getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(getCurrentUserError(error.message));\n  }\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const registerRequest = createAction('auth/registerRequest');\nexport const registerSuccess = createAction('auth/registerSuccess');\nexport const registerError = createAction('auth/registerError');\n\nexport const loginRequest = createAction('auth/loginRequest');\nexport const loginSuccess = createAction('auth/loginSuccess');\nexport const loginError = createAction('auth/loginError');\n\nexport const logoutRequest = createAction('auth/logoutRequest');\nexport const logoutSuccess = createAction('auth/logoutSuccess');\nexport const logoutError = createAction('auth/logoutError');\n\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nexport const getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nexport const getCurrentUserError = createAction('auth/getCurrentUserError');\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userMenu\":\"UserMenu_userMenu__13pLK\",\"user\":\"UserMenu_user__1rMm_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__1RW3h\"};","import { React, Component } from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getAutendicated } from '../../redux/auth/auth-selectors';\nimport styles from './Navigation.module.scss';\n\nclass Navigation extends Component {\n  render() {\n    const { isAutenticated } = this.props;\n    return (\n      <nav>\n        <NavLink className={styles.nav_link} activeClassName={styles.nav_linkActive} to=\"/\" exact>\n          Главная\n        </NavLink>\n        {isAutenticated && (\n          <NavLink className={styles.nav_link} activeClassName={styles.nav_linkActive} to=\"/contacts\" exact>\n            Мои контакты\n          </NavLink>\n        )}\n      </nav>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAutenticated: getAutendicated(state),\n});\n\nexport default connect(mapStateToProps)(Navigation);\n","import { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport styles from './AuthNav.module.scss';\n\nclass AuthNav extends Component {\n  render() {\n    return (\n      <div>\n        <NavLink to=\"/register\" className={styles.nav_link} activeClassName={styles.nav_linkActive}>Регистрация</NavLink>\n        <NavLink to=\"/login\" className={styles.nav_link} activeClassName={styles.nav_linkActive}>Логин</NavLink>\n      </div>\n    );\n  }\n}\n\nexport default AuthNav;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { logOut } from '../../../redux/auth/auth-operations';\nimport { getEmail } from '../../../redux/auth/auth-selectors';\nimport styles from \"./UserMenu.module.scss\";\n// import Button from 'react-bootstrap/Button';\nimport styled from 'styled-components';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid #3f3f3f;\n  color: #3f3f3f;\n  width: 100px;\n  height: 30px;\n  margin-left: 1em;\n  padding: 0.25em 1em;\n  font-weight: 700;\n  \n  &:hover {\n    background: LemonChiffon;\n  }\n`;\n\nclass UserMenu extends Component {\n  render() {\n    const { email, onLogout } = this.props;\n\n    return (\n      <div className={styles.userMenu}>\n        <p className={styles.user}>{email}</p>\n        <Button type=\"button\" onClick={onLogout}>\n          Выйти\n        </Button>{' '}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  email: getEmail(state),\n});\n\nconst mapDispatchToProps = {\n  onLogout: logOut,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n","import { React, Component } from 'react';\nimport Navigation from '../Navigation/Navigation';\nimport AuthNav from './AuthNav/AuthNav';\nimport UserMenu from './UserMenu/UserMenu';\nimport { getAutendicated } from '../../redux/auth/auth-selectors';\nimport { connect } from 'react-redux';\nimport styled from './AppBar.module.scss';\n\nclass AppBar extends Component {\n  render() {\n    const { isAutendicated } = this.props;\n\n    return (\n      <header className={styled.header}>\n        <Navigation />\n        {isAutendicated ? <UserMenu /> : <AuthNav />}\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAutendicated: getAutendicated(state),\n});\n\nexport default connect(mapStateToProps)(AppBar);\n","import { connect } from 'react-redux';\nimport { Redirect, Route } from 'react-router';\nimport { getAutendicated } from '../redux/auth/auth-selectors';\n\n// Если маршрут приватный и пользователь залогинен, то рендерит компонент\n// В противном случае рендерит Redirect на /login\n\nconst PrivateRoute = ({\n  component: Component,\n  isAuntenticated,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuntenticated ? <Component {...props} /> : <Redirect to=\"/login\" />\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuntenticated: getAutendicated(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import { connect } from 'react-redux';\nimport { Redirect, Route } from 'react-router';\nimport { getAutendicated } from '../redux/auth/auth-selectors';\n\n// Если маршрут ограниченный и пользователь залогинен, то рендерит редирект на /contacts\n// В противном случак рендерит компонент\n\nconst PublicRoute = ({\n  component: Component,\n  isAutenticated,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAutenticated && routeProps.restricted ? (\n        <Redirect to=\"/contacts\" />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAutenticated: getAutendicated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import { Component, lazy, Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router';\nimport AppBar from './components/AppBar/AppBar';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport { getCurrentUser } from './redux/auth/auth-operations';\n\nconst HomeView = lazy(() =>\n  import('./views/HomeView' /* webpackChunkName: \"home-page\" */),\n);\n\nconst ContactsView = lazy(() =>\n  import('./views/ContactsView' /* webpackChunkName: \"contacts-page\" */),\n);\n\nconst LoginView = lazy(() =>\n  import('./views/LoginView' /* webpackChunkName: \"login-page\" */),\n);\n\nconst RegisterView = lazy(() =>\n  import('./views/RegisterView' /* webpackChunkName: \"register-page\" */),\n);\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <div>\n        <AppBar />\n        <Suspense fallback={<p>Загружаем...</p>}>\n          <Switch>\n            <Route exact path=\"/\" component={HomeView} />\n            <PrivateRoute path=\"/contacts\" component={ContactsView} />\n            <PublicRoute restricted path=\"/login\" component={LoginView} />\n            <PublicRoute restricted path=\"/register\" component={RegisterView} />\n          </Switch>\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport {\n  addRequest,\n  addSuccess,\n  addError,\n  deleteRequest,\n  deleteSuccess,\n  deleteError,\n  filterContacts,\n  fetchRequest,\n  fetchSuccess,\n  fetchError,\n} from './contacts-action';\n\nconst itemsReducer = createReducer([], {\n  [fetchSuccess]: (_, { payload }) => payload,\n  [addSuccess]: (state, { payload }) => [...state, payload],\n  [deleteSuccess]: (state, { payload }) =>\n    state.filter(item => item.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [addRequest]: () => true,\n  [addSuccess]: () => false,\n  [addError]: () => false,\n  [deleteRequest]: () => true,\n  [deleteSuccess]: () => false,\n  [deleteError]: () => false,\n  [fetchRequest]: () => true,\n  [fetchSuccess]: () => false,\n  [fetchError]: () => false,\n});\n// const itemsReducer = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.ADD:\n//       return [...state, payload];\n//     case actionTypes.DELETE:\n//       return state.filter(item => item.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.FILTER:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  loading,\n});\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\nimport {\n  registerSuccess,\n  registerRequest,\n  registerError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n} from './auth-actions';\n\nconst initialState = { name: null, email: null };\n\nconst user = createReducer(initialState, {\n  [registerSuccess]: (_, { payload }) => payload.user,\n  [loginSuccess]: (_, { payload }) => payload.user,\n  [logoutSuccess]: (_, { payload }) => initialState,\n  [getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [registerSuccess]: (_, { payload }) => payload.token,\n  [loginSuccess]: (_, { payload }) => payload.token,\n  [logoutSuccess]: () => null,\n});\n\nconst error = createReducer(null, {\n  [registerError]: (_, { payload }) => payload,\n  [loginError]: (_, { payload }) => payload,\n  [logoutError]: (_, { payload }) => payload,\n  [getCurrentUserError]: (_, { payload }) => payload,\n});\n\nconst isAutenticated = createReducer(false, {\n  [registerSuccess]: () => true,\n  [loginSuccess]: () => true,\n  [getCurrentUserSuccess]: () => true,\n  [registerError]: () => false,\n  [loginError]: () => false,\n  [getCurrentUserError]: () => false,\n  [logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAutenticated,\n  token,\n  error,\n});\n","import {\n  combineReducers,\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import { combineReducers, createStore } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\nimport authReducer from './auth/auth-reducer';\nimport persistReducer from 'redux-persist/es/persistReducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n//Pure Redux\n// const rootReducer = combineReducers({\n//     contacts: contactsReducer,\n//   });\n// const store = createStore(rootReducer, composeWithDevTools());\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}